<TouchableWithoutFeedback onPress={() => console.log('image tapped')}><Image source={require('./assets/favicon.png')}/></TouchableWithoutFeedback>


onPress={() => Alert.alert('My title', "My Message",[
        {text: 'yes'},
        {text: 'No'}
      ])}/>

        <Button color="blue" title='Click me' 
      onPress={() => Alert.prompt("My title", "My Message",text => console.log(text))}/>


          paddingTop: Platform.OS === 'android' ? 20 : 0


          onsole.log('App executed')
  const {landscape} = useDeviceOrientation();


  return (
    <SafeAreaView style={styles.container}>
    <View style={{
      backgroundColor:"dodgerblue",
      width: '100%',
      height: landscape ? '100%' : '30%',
    }}></View>
      <StatusBar style="auto" />
    </SafeAreaView>
  );
}


const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',

  },

});

 alignContent: 'center',
      flexWrap: 'wrap',
    <View style={{
      backgroundColor:'#fff',
      flex: 1,
      flexDirection: 'row',
      justifyContent: "center", //main
      alignItems: 'center', //secondary
     
      }}
      >
        <View style={{
          backgroundColor: "dodgerblue",
          width: 100,
          height: 100,
          
         
        
      }}>
        </View>
        <View style={{
          backgroundColor: "gold",
         
          width: 100,
          height: 100,
          top: 20,
          right: 20,
          position: 'relative'
      }}>
        </View>
        <View style={{
          backgroundColor: "tomato",
         
          width: 100,
          height: 100
      }}>
       
        </View>
      </View>


  return (
    <ImageBackground
      style={styles.background}
      source={require('../background.jpg')}>
      <View style={styles.container}>
        <Image
          style={styles.logo}
          source={require('../logo.png')} />
        <Text style={styles.text}>Sell what you need</Text>
      </View>
      <TouchableOpacity onPress={handleLogin} style={styles.loginButton}>
        <Text style={styles.buttonText}>Login</Text>
      </TouchableOpacity>
      <View style={styles.space} />
      <TouchableOpacity onPress={handleRegister} style={styles.registerButton}>
        <Text style={styles.buttonText}>Register</Text>
      </TouchableOpacity>
    </ImageBackground>
  );
}


 <View style={{
    backgroundColor:'#f8f4f4',
    padding: 20,
    paddingTop: 100
  }}>
    <Card 
    title="Red Jacket"
    subTitle="$100"
    image={require("./app/assets/jacket.jpg")}/>
  </View>


  color: 

  primary: "#fcf5c65",
  secondary: '#4ecdc4',
  black:"#000",
  white:"#fff",
  medium:'#6e6969',
  light:"#f8f4f4",
  dark:"#0c0c0c"
  danger:"#ff5252',


   <SafeAreaView>
  <AppPicker
    selectedItem={category}
    onSelectItem={ item => setCategory(item)}
    items = {categories} 
    icon="apps" 
    placeholder="Category" />
  <AppTextInput icon="email" placeholder="Email"/>
  </SafeAreaView>



const categories = [

  {label: "Furniture", value:1},
  {label: "Clothing", value:2},
  {label: "Cameras", value:3},
  
]

  const [category, setCategory] = useState('');


    const [email, setEmail] = [] = useState();

    const [password, setPassword] = [] = useState();


     <NewListingScreen name="category" placeholder='Select a Category' PickerItemComponent={CategoryPickerItem} numOfColumns={3}/>




     import React, { useState, useEffect } from 'react';
import { Button, Image, View, Platform } from 'react-native';
import * as ImagePicker from 'expo-image-picker';

export default function ImagePickerExample() {
  const [image, setImage] = useState(null);

  const pickImage = async () => {
    // No permissions request is necessary for launching the image library
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.All,
      allowsEditing: true,
      aspect: [4, 3],
      quality: 1,
    });

    console.log(result);

    if (!result.canceled) {
      setImage(result.assets[0].uri);
    }
  };

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Button title="Pick an image from camera roll" onPress={pickImage} />
      {image && <Image source={{ uri: image }} style={{ width: 200, height: 200 }} />}
    </View>
  );
}





import { StatusBar } from 'expo-status-bar';
import { StyleSheet, Text, View, Image, SafeAreaView, TouchableWithoutFeedback, Button,Alert, Platform, Dimensions, TextInput} from 'react-native'
import { useEffect, useState} from 'react'
import { useDeviceOrientation } from "@react-native-community/hooks"

import WelcomeScreen from './app/assets/screens/WelcomeScreen';
import ViewImageScreen from './app/assets/screens/ViewImageScreen';
import ButtonExcerise from './app/assets/screens/ButtonExcerise';
import AccountScreen from './app/assets/screens/AccountScreen';
import ListingScreen from './app/assets/screens/ListingScreen';
import MessageScreen from './app/assets/screens/MessageScreen';
import LoginScreen from './app/assets/screens/LoginScreen';



{/** Components */}
import Card from './components/Card/Card';
import ListingDetails from './app/assets/screens/ListingDetails';
import AppTextInput from './components/App/AppTextInput';
import AppPicker from './components/App/AppPicker';
import RegisterScreen from './app/assets/screens/RegisterScreen';
import NewListingScreen from './app/assets/screens/NewListingScreen';
import CategoryPickerItem from './components/Menu/CategoryPickerItem';


import * as ImagePicker from 'expo-image-picker'
import * as Permissions from "expo-permissions"



export default function App() {
  console.log('app executed')

  const [imageUri, setImageUri] = useState();

  // const requestPermission = async () => {
  //   await Permissions.requestAsync(Permissions.CAMERA, Permissions.LOCATION_BACKGROUND)
  //   const { granted } = await ImagePicker.requestCameraPermissionsAsync();
  //   if(!granted){
  //     alert('You need to enable permission to access library')
  //   }
  // }
  

  // useEffect(() => {

  //   requestPermission();
  
  // },[])


  const selectImage = async () => {
    try {
      const result  = await ImagePicker.launchImageLibraryAsync();
      if(result.canceled){
        setImageUri(result.uri)
      }
    } catch (error) {
      console.Log('error: ', error)
    }
    
  }
  return (

       <SafeAreaView style={styles.container}>
        <Button title="Select Image" onPress={selectImage}/>
        <Image source={{uri: imageUri }} style={{width:200, height:200}}/>
       </SafeAreaView>
  )
}




export default function App() {
  console.log('app executed')

   const [imageUris, setImageUris] = useState([]);

   const handleAdd = ( uri ) => {
    setImageUris([...imageUris, uri])
   }
   const handleRemove = ( uri ) => {
    setImageUris(imageUris.filter((imageUri) => imageUri !== uri))
   }

  return (

       <SafeAreaView style={styles.container}>
        <ImageInputList 
        imageUris={imageUris} 
        onAddImage={handleAdd}
        onRemoveImage={handleRemove}
        />
       </SafeAreaView>
  )
}


const styles = StyleSheet.create({
  container:{
   alignItems:'center'
  }

})



const Link = () => {

  const navigation = useNavigation();
  return ( <Button
    title='Click'
    onPress={() => navigation.navigate('TweetDetails') }
    />)
 
}
const TweetDetails = () => {
  return (
    <View>
      <Text>Tweet Details</Text>
    </View>
  );
};
const Tweets = ({ navigation}) => {
  return (
  <View style={styles.container}> 
    <Text>
      Tweets
    </Text>
        <Link/>
      </View>
  )
}




const Stack = createNativeStackNavigator();

const StackNavigator = () => (

  <Stack.Navigator>
    <Stack.Screen name="TweetDetails" component={TweetDetails} />
    <Stack.Screen name="Tweet" component={Tweets} />
  </Stack.Navigator>

)


const Account = () => {
  return ( 
  <View>
    <Text>Account</Text>
  </View>)
   
}

const Tab = createBottomTabNavigator();

const TabNavigator = () => (
  <Tab.Navigator initialRouteName="Feed">
    <Tab.Screen name="Feed" component={StackNavigator}/>
    <Tab.Screen name="Account" component={Account}/>
  </Tab.Navigator>
)





